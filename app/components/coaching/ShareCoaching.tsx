'use client';

import { useState } from 'react';
import { Share2, Copy, Check, Image as ImageIcon } from 'lucide-react';
import { domToPng } from 'modern-screenshot';

interface DataPoint {
  label: string;
  value: string;
}

interface Recommendation {
  action: string;
  why?: string;
  timeframe?: string;
}

interface Coaching {
  message: string;
  dataPoints: DataPoint[];
  insights: string[];
  recommendation: Recommendation;
  motivationBoost: string;
}

interface Metadata {
  timeRange: string;
}

interface ShareCoachingProps {
  coaching: Coaching;
  metadata: Metadata;
}

export default function ShareCoaching({ coaching, metadata }: ShareCoachingProps) {
  const [showMenu, setShowMenu] = useState(false);
  const [copied, setCopied] = useState(false);
  const [exporting, setExporting] = useState(false);

  const copyAsText = async () => {
    const text = `ðŸŽ¯ Bitcoin Sovereignty Coaching (${metadata.timeRange})

${coaching.message}

ðŸ“Š Key Metrics:
${coaching.dataPoints.map((d) => `â€¢ ${d.label}: ${d.value}`).join('\n')}

ðŸ’¡ Key Insights:
${coaching.insights.map((i: string) => `â€¢ ${i}`).join('\n')}

ðŸŽ¯ Next Action:
${coaching.recommendation.action}

Why: ${coaching.recommendation.why}
Timeframe: ${coaching.recommendation.timeframe}

ðŸ”¥ ${coaching.motivationBoost}

â€” Generated by Sovereignty Tracker`;

    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
      alert('Failed to copy to clipboard');
    }
  };

  const exportAsImage = async () => {
    setExporting(true);

    // CRITICAL: Hide the share menu before capturing
    const wasMenuOpen = showMenu;
    setShowMenu(false);

    // Wait for React to re-render without the menu
    await new Promise(resolve => setTimeout(resolve, 50));

    try {
      const element = document.getElementById('coaching-container');
      if (!element) {
        throw new Error('Coaching container not found');
      }

      // Use modern-screenshot instead of html2canvas
      const dataUrl = await domToPng(element, {
        backgroundColor: '#0f172a',
        scale: 2,
        quality: 0.95,
        style: {
          // Ensure proper rendering
          transform: 'scale(1)',
        }
      });

      // Convert data URL to blob and download
      const response = await fetch(dataUrl);
      const blob = await response.blob();

      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      const date = new Date().toISOString().split('T')[0];
      link.href = url;
      link.download = `bitcoin-coaching-${date}.png`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      setExporting(false);

      // Restore menu state if it was open
      if (wasMenuOpen) {
        setShowMenu(true);
      }
    } catch (error) {
      console.error('Export error:', error);
      alert('Failed to export image. Please try again.');
      setExporting(false);

      // Restore menu state on error too
      if (wasMenuOpen) {
        setShowMenu(true);
      }
    }
  };

  const shareToTwitter = () => {
    const firstDataPoint = coaching.dataPoints[0];
    const text = `Just got AI coaching on my Bitcoin sovereignty journey! ðŸŽ¯\n\nðŸ“Š ${firstDataPoint.label}: ${firstDataPoint.value}\nðŸ”¥ ${coaching.motivationBoost}\n\n#Bitcoin #Sovereignty`;
    const url = `https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}`;
    window.open(url, '_blank', 'width=600,height=400');
    setShowMenu(false);
  };

  return (
    <div className="relative">
      <button
        onClick={() => setShowMenu(!showMenu)}
        className="flex items-center gap-2 px-4 py-2 bg-slate-700 text-white rounded-lg hover:bg-slate-600 transition-colors"
      >
        <Share2 className="h-4 w-4" />
        Share
      </button>

      {showMenu && (
        <>
          <div
            className="fixed inset-0 z-40"
            onClick={() => setShowMenu(false)}
          />

          <div className="absolute right-0 mt-2 w-56 bg-slate-800 border border-slate-700 rounded-lg shadow-xl z-50 overflow-hidden">
            <div className="p-2 space-y-1">
              <button
                onClick={copyAsText}
                className="w-full flex items-center gap-3 px-3 py-2 text-sm text-white hover:bg-slate-700 rounded-lg transition-colors"
              >
                {copied ? (
                  <>
                    <Check className="h-4 w-4 text-green-400" />
                    <span className="text-green-400">Copied!</span>
                  </>
                ) : (
                  <>
                    <Copy className="h-4 w-4" />
                    <span>Copy as Text</span>
                  </>
                )}
              </button>

              <button
                onClick={exportAsImage}
                disabled={exporting}
                className="w-full flex items-center gap-3 px-3 py-2 text-sm text-white hover:bg-slate-700 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <ImageIcon className="h-4 w-4" />
                <span>{exporting ? 'Exporting...' : 'Export as Image'}</span>
              </button>

              <div className="border-t border-slate-700 my-2" />

              <button
                onClick={shareToTwitter}
                className="w-full flex items-center gap-3 px-3 py-2 text-sm text-white hover:bg-slate-700 rounded-lg transition-colors"
              >
                <svg className="h-4 w-4" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z" />
                </svg>
                <span>Share to X</span>
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
